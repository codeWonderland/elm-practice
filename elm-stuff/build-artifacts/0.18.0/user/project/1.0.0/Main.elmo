var _user$project$Main$isValid = function ($char) {
	return (!_elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('O'))) && ((!_elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('k'))) && ((!_elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr(' '))) && (!_elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('\"')))));
};
var _user$project$Main$parseJson = function (msg) {
	var datum = A2(
		_myrho$elm_round$Round$roundCom,
		2,
		A2(
			_elm_lang$core$Result$withDefault,
			0,
			_elm_lang$core$String$toFloat(
				A2(
					_elm_lang$core$String$filter,
					_user$project$Main$isValid,
					_elm_lang$core$Basics$toString(
						A2(
							_elm_lang$core$Json_Decode$decodeString,
							A2(
								_elm_lang$core$Json_Decode$at,
								{
									ctor: '::',
									_0: 'price',
									_1: {ctor: '[]'}
								},
								_elm_lang$core$Json_Decode$string),
							msg))))));
	var _p0 = datum;
	if (_p0 === '0.00') {
		return 'Live Bitcoin Cost : ';
	} else {
		return datum;
	}
};
var _user$project$Main$viewMessage = function (msg) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				_user$project$Main$parseJson(msg)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$unsubArgs = '{ \"type\": \"unsubscribe\", \"product_ids\": [\"BTC-USD\"], \"channels\": [ {\"name\": \"ticker\", \"product_ids\": [\"BTC-USD\"]}]}';
var _user$project$Main$gdaxArgs = '{ \"type\": \"subscribe\", \"product_ids\": [\"BTC-USD\"], \"channels\": [ {\"name\": \"ticker\", \"product_ids\": [\"BTC-USD\"]}]}';
var _user$project$Main$gdaxServer = 'wss://ws-feed.gdax.com';
var _user$project$Main$Model = function (a) {
	return {messages: a};
};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: _user$project$Main$Model(
		{ctor: '[]'}),
	_1: A2(_elm_lang$websocket$WebSocket$send, _user$project$Main$gdaxServer, _user$project$Main$gdaxArgs)
};
var _user$project$Main$update = F2(
	function (msg, _p1) {
		var _p2 = _p1;
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'Start':
				return {
					ctor: '_Tuple2',
					_0: _user$project$Main$Model(
						{ctor: '[]'}),
					_1: A2(_elm_lang$websocket$WebSocket$send, _user$project$Main$gdaxServer, _user$project$Main$gdaxArgs)
				};
			case 'Stop':
				return {
					ctor: '_Tuple2',
					_0: _user$project$Main$Model(
						{ctor: '[]'}),
					_1: A2(_elm_lang$websocket$WebSocket$send, _user$project$Main$gdaxServer, _user$project$Main$unsubArgs)
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _user$project$Main$Model(
						{ctor: '::', _0: _p3._0, _1: _p2.messages}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$NewMessage = function (a) {
	return {ctor: 'NewMessage', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$websocket$WebSocket$listen, _user$project$Main$gdaxServer, _user$project$Main$NewMessage);
};
var _user$project$Main$Stop = {ctor: 'Stop'};
var _user$project$Main$Start = {ctor: 'Start'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Start),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Start'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Stop),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Stop'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							_user$project$Main$viewMessage,
							_elm_lang$core$List$reverse(model.messages))),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{subscriptions: _user$project$Main$subscriptions, init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update})();
